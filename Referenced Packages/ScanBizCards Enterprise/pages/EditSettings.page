<apex:page id="myPage" showHeader="true" sidebar="true" controller="scanbizcards.EditSettingsCtlr" action="{!initialDMLOperations}">
    <apex:stylesheet value="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'jquery-ui.min.css')}" />
    <!--<apex:stylesheet value="{!$Resource.ScanBizCardsCSS}" /> -->
    
    <script type="text/javascript">
        if (navigator.userAgent.indexOf('Firefox') != -1) {//Firefox
            document.write('<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'main_ff.css')}" />');
        } else if (navigator.userAgent.indexOf('Chrome') != -1) {//Chrome
            document.write('<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'main.css')}" />');
        } else if(navigator.userAgent.indexOf('Safari') != -1) {//Safari
            document.write('<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'main.css')}" />');
        } else {
            document.write('<link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'main_ie.css')}" />');
        }
    </script>
  
    <!-- <apex:stylesheet value="{!URLFOR($Resource.ScanBizCardsPackage, 'main.css')}" /> -->
    <apex:stylesheet value="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'font-awesome-4.1.0/css/font-awesome.min.css')}" />
    <script type="text/javascript" src="{!URLFOR($Resource.ScanBizCardsPackage, 'jquery-1.10.2.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.ScanBizCardsPackage, 'jquery-ui.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.ScanBizCardsPackage, 'jquery.tinyscrollbar.min.js')}"></script>
    <script type="text/javascript">
        Visualforce.remoting.timeout = 120000;
        $j = jQuery.noConflict();
        
        $j(document).ready(function(){
            displayPersonAccountOnly('{!JSENCODE(setting.Allow_Person_Account__c)}', true);
            
            $j('.htmlMe').each(function() {
                $j(this).html($j(this).text());
            });
            
            if ('{!hasPersonAccount}' === 'false') {
                $j('#personAccountEnable').hide();
            }
            
            var listOfDropdown = new Array();
            var listOfDropdownStr = '';
            
            if ('{!isRecordTypeAndPermAvailable}' === 'true') {
                $j('select[class*="_dropdown_object_"]').each(function () {
                    var dropdownInfo = $j(this).attr('class');
                    dropdownInfo = dropdownInfo.split('_dropdown_object_');
                    
                    if (dropdownInfo) {
                        var name = dropdownInfo[0];
                        var field = dropdownInfo[1];
                        var selectOptions = this.options;
                        
                        var list = '';
                        
                        for (var i = 0; i < this.length; i++) {
                            var label = selectOptions[i].text;
                        
                            if (label && label !== '--None--') {
                                if (list.length === 0) {
                                    list = label;
                                }
                            
                                if (list.indexOf(label) == -1) {
                                    list += '|' + label;
                                }
                            }
                        }
                        
                        var fieldInfo = {
                            recordTypeId: name,
                            fieldName: field,
                            values: list
                        };
                        
                        
                        if (listOfDropdown[name + field]) {
                            if(listOfDropdown[name + field].values.length < list) {
                                listOfDropdown[name + field] = (fieldInfo);
                            }
                        } else {
                            listOfDropdown[name + field] = (fieldInfo);
                        }
                    }
                });
            }
            
            var myFilterList = new Array();
            for (var field in listOfDropdown) {
                if (listOfDropdown[field].fieldName) {
                    myFilterList.push(listOfDropdown[field]);
                }
            }
            
            applyScrollbar();
            changeWorkingArea($j('.active a')[0]);
            
            showErrorMessage();
            
            $j('.sort').click(function() {open($j($j(this).prev()));});
            
            
            for (var recType in myFilterList) {
                listOfDropdownStr += myFilterList[recType].recordTypeId + '###' + myFilterList[recType].fieldName + '###' + myFilterList[recType].values + '\n';
            }
            
            if ('{!JSENCODE($CurrentPage.parameters.debug)}' === 'true') {
                console.log(JSON.stringify(myFilterList));
                console.log(listOfDropdownStr);
                alert(JSON.stringify(myFilterList));
            }

            if ('{!isRecordTypeAndPermAvailable}' === 'true') {
                //updateRecordTypeMapping(JSON.stringify(myFilterList));
                //console.log(listOfDropdownStr);
                updateRecordTypeMapping(listOfDropdownStr);
            }
            
            attachSearch();
        });
        
        function showErrorMessage() {
            var errorMsgText = $j('[id="myPage:myForm:hiddenErrorMessage"]').val();

            if (errorMsgText !== undefined && errorMsgText.length > 0) {
                try {
                var errorMsg = JSON.parse(errorMsgText);
                if (errorMsg.type === 'dupe') {
                    $j('.menu a:contains("DuplicateCriteria")').parent().addClass('errorText');
                    $j('#dupeErrorMessage').show();
                    $j('#dupeErrorMessage').addClass('errorMessageInfo');
                } else {
                    $j('.menu a:contains("' + errorMsg.type + 'Options")').parent().addClass('errorText');
                    var row = $j('.' + errorMsg.type + 'Options').find('div.Row .Cell:contains("' + errorMsg.Label + '")').parent();
                    
                    $j(row).addClass('errorMessageInfo');
                }
                } catch (err) {
                
                }
            }
        }
        
        function popup() {
            var buttons = $j('.btn');
            $j('.popup').show();
            $j('.blackBackground').show();
            $j(buttons).toggleClass('btnDisabled', true).attr('disabled', 'disabled');
        }        
        
        
        function closePopup() {
            var buttons = $j('.btn');
            $j('.popup').hide();
            $j('.blackBackground').hide();
            $j(buttons).toggleClass('btnDisabled', false).attr('disabled', null);
        }  
        
        function applyScrollbar() {
            $j('.customTableScrollbar').tinyscrollbar({wheelSpeed: 40});
            
            $j('#configOptions').tinyscrollbar();
            $j('#availableType').tinyscrollbar();
            $j('#selectedType').tinyscrollbar();
            
            $j('#acctStandard').tinyscrollbar();
            $j('#acctCustom').tinyscrollbar();            
            $j('#accountRecordType').tinyscrollbar();
            
            $j('#pAcctStandard').tinyscrollbar();
            $j('#pAcctCustom').tinyscrollbar();            
            $j('#pAccountRecordType').tinyscrollbar();
            
            $j('#leadStandard').tinyscrollbar();
            $j('#leadCustom').tinyscrollbar();
            $j('#leadRecordType').tinyscrollbar();
            
            $j('#contactStandard').tinyscrollbar();
            $j('#contactCustom').tinyscrollbar();
            $j('#contactRecordType').tinyscrollbar();
            
            //updateScrollbar();
            
            //$j('.customTableScrollbar').each(function () {
            //  var heightOfTable = $j($j(this).find('.Table2')[0]).height();
            //  if (heightOfTable < 455) {
            //      $j(this).height(heightOfTable + 20);
            //  }
            //});
        }
        
        var personAcctLoaded = false;
        
        function updatePersonAccountScrollerbar() {
            $j('#pAcctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
            $j('#pAcctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
            $j('#pAcctRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            personAcctLoaded = true;
            
        }
        
        function updateScrollbar() {
            if($j('#availableType').tinyscrollbar().data("plugin_tinyscrollbar")) {
                $j('#availableType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            }
            if($j('#selectedType').tinyscrollbar().data("plugin_tinyscrollbar")) {
                $j('#selectedType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            }
            $j('#acctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
            $j('#acctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
            $j('#accountRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            
            if (personAcctLoaded) {
                updatePersonAccountScrollerbar();
            }
            
            $j('#leadRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            $j('#contactRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
        }
        
        function open(elem) {
            var e = document.createEvent("MouseEvents");
            e.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            elem[0].dispatchEvent(e);
        }
        
        function applySelect(value, selected) {
            var selectedLabel = $j(value).data('id');
            var selectedText = $j(value).data('name');

            var currentList = document.getElementsByClassName('avilDropdown')[0].value;
            var currentList2 =  document.getElementsByClassName('avilDropdown1')[0].value;

            if (currentList) {
                if ($j(value).parent().hasClass('selected')) {
                    $j(value).parent().removeClass('selected');
                    document.getElementsByClassName('avilDropdown')[0].value = currentList.replace(selectedLabel, '');
                    document.getElementsByClassName('avilDropdown1')[0].value = currentList2.replace(selectedText, '');
                } else {
                    document.getElementsByClassName('avilDropdown')[0].value = currentList + '|' + selectedLabel;
                    document.getElementsByClassName('avilDropdown1')[0].value = currentList2 + '|' + selectedText;
                    $j(value).parent().addClass('selected');
                }
            } else {
                document.getElementsByClassName('avilDropdown')[0].value = selectedLabel;
                document.getElementsByClassName('avilDropdown1')[0].value = selectedText;
                $j(value).parent().addClass('selected');
            }
        }
        
        function resizeTables() {
            $j('.customTableScrollbar').each(function () {
                if ($j(this).is(":visible")) {
                    var heightOfTable = $j($j(this).find('.Table2')[0]).height();
            
                    if (heightOfTable < 455) {
                        $j(this).height(heightOfTable);
                        $j(this).find('.scrollbar').hide();
                    }
                }
            });
        }
        
        function changeWorkingArea(content) {
            window.scrollTo(0,0);
            var label = $j(content).text();
            switch (label) {
                case 'ConfigurationOptions':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    //$j('.topConfigOptions').show();
                    $j('.configOptions').show();
                    
                    // Hide the other contents
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    $j('#configOptions').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    break;
                case 'AccountOptions':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.AccountOptions').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    
                    if ($j('#pAcctStandard').tinyscrollbar().data("plugin_tinyscrollbar")) {
                        $j('#pAcctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                        $j('#pAcctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
                        $j('#pAcctRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    }
                    
                    $j('#acctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#acctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#accountRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    resizeTables();
                    break;
                case 'LeadOptions':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.LeadOptions').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    
                    $j('#leadStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#leadCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#leadRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    resizeTables();
                    break;
                case 'ContactOptions':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.ContactOptions').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    
                    $j('#contactStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#contactCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    $j('#contactRecordType').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    resizeTables();
                    break;
                case 'DuplicateCriteria':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.DuplicateCriteria').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    resizeTables();
                    break;
                case 'Campaigns':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.Campaigns').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Accounts').hide();
                    $j('.LeadOwners').hide();
                    startLoadingCampaigns(null);
                    $j('[ID="myPage:myForm:CampaignsTable"]').hide();    
                    
                    fetchCampaignList();
                    break;
                case 'Accounts':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.Accounts').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.LeadOwners').hide();
                    startLoadingAccounts(null);
                    $j('[ID="myPage:myForm:accountTable"]').hide();
                    fetchAccountList();
                    
                    break;
                case 'LeadOwners':
                    $j('.active').removeClass('active');
                    $j(content).parent().addClass('active');
                    
                    $j('.LeadOwners').show();
                    
                    // Hide the other contents
                    //$j('.topConfigOptions').hide();
                    $j('.configOptions').hide();
                    $j('.AccountOptions').hide();
                    $j('.LeadOptions').hide();
                    $j('.ContactOptions').hide();
                    $j('.DuplicateCriteria').hide();
                    $j('.Campaigns').hide();
                    $j('.Accounts').hide();
                    startLoadingLeadOwners(null);
                    $j('[ID="myPage:myForm:leadOwnersTable"]').hide();
                    fetchLeadList();
                    
                    break;
            }
        }
        
        function loadLazyContent(contentType) {
            $j('[ID="myPage:myForm:' + contentType + '"]').show();
            $j('[ID="myPage:myForm:' + contentType + '"]').tinyscrollbar().data("plugin_tinyscrollbar").update();
            resizeTables();
        }
        
        function setSelectionRange(el, selectionStart, selectionEnd) {
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = selectionStart;
            } else if (typeof el.createTextRange != "undefined") {
                el.focus();
                var range = el.createTextRange();
                range.collapse(false);
                range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
                range.select();
            }
        }
        
        function setCaretToPos(input, pos) {
          setSelectionRange(input, pos, pos);
        }
  
        $j(document).on("click", ".tooltip", function() {
            $j(this).tooltip({ 
                items: ".tooltip",
                position: {
                    my: "center top+10",
                    at: "center bottom+10",
                    using: function (position, feedback) {
                        $j(this).css(position);
                        $j("<div>").addClass("arrow").addClass(feedback.vertical).addClass(feedback.horizontal).appendTo(this);
                    }
                },
                content: function () {
                    return $j(this).data('description');
                }, 
                close: function (event, ui) {
                    var me = this;
                    ui.tooltip.hover(
                        function () {
                            $j(this).stop(true).fadeTo(400, 1); 
                        },
                        function () {
                            $j(this).fadeOut("400", function(){
                                $j(this).remove();
                            });
                        }
                    );
                    
                    ui.tooltip.on("remove", function(){
                        $j(me).tooltip("destroy");
                    });
                },
                hide: {
                    duration: 400
                }
            });
            $j(this).tooltip("open");
            return false;
        });
        
        function sortLoading(enabled) {
            var buttons = $j('.btn');
        
            if (enabled) {
                $j('.loading').show();
                $j('.blackBackground').show();
                $j(buttons).toggleClass('btnDisabled', true).attr('disabled', 'disabled');
            } else {
                $j('.loading').hide();
                $j('.blackBackground').hide();
                $j(buttons).toggleClass('btnDisabled', false).attr('disabled', null);
            }
        }
        
        function displayPersonAccountOnly(dropdownVal, preload) {
            if (dropdownVal === 'Yes') {
                if (!personAccountLoaded) {
                    if (!preload) {
                        rerenderPersonAccount();
                    }
                    personAccountLoaded = true;
                }
                document.getElementById('personAccountOnly').style.display = '';
                document.getElementsByClassName('personAccountSectionCls')[0].style.display = '';
                document.getElementsByClassName('reuglarAccount')[0].style.display = 'none';
                //$j('#pAcctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                //$j('#pAcctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
            } else {
                document.getElementById('personAccountOnly').style.display = 'none';
                document.getElementsByClassName('personAccountSectionCls')[0].style.display = 'none';
                document.getElementsByClassName('reuglarAccount')[0].style.display = '';
                //$j('#acctStandard').tinyscrollbar().data("plugin_tinyscrollbar").update();
                // $j('#acctCustom').tinyscrollbar().data("plugin_tinyscrollbar").update();
            }
            $j('#configOptions').tinyscrollbar().data("plugin_tinyscrollbar").update();
            //applyScrollbar();
        }
        
        var personAccountLoaded = false;
        
        function displayValidating(bval) {
            if (bval) {
                $j('.validating').show();
                $j('.typeSelector').prop('disabled', true);
                $j('.upperIconContainer').css('visibility', 'hidden');
                $j('.lowerIconContainer').css('visibility', 'hidden');
                $j('.typeSelectorLoading').show();
            } else {
                $j('.validating').hide();
                $j('.typeSelector').prop('disabled', false);
                $j('.upperIconContainer').css('visibility', 'visible');
                $j('.lowerIconContainer').css('visibility', 'visible');
                $j('.typeSelectorLoading').hide();
            }
        }
        
        function verifyRecordType(checkbox, fieldInfo) {
            var defaultCheckbox = document.getElementsByClassName('recordType_' + fieldInfo)[0];
            var checked = $j(checkbox).prop('checked');
            
            if (!checked) {
                if (defaultCheckbox.checked) {
                    defaultCheckbox.checked = false;
                    document.getElementById('recordType_' + fieldInfo).checked = false;
                }
            }
        }
        
        var apexJobId = "";
        
        function processDisableField(fieldInfo) {
        /*
            var textField = document.getElementsByClassName('input_' + fieldInfo)[0];
            var disableField = document.getElementsByClassName('disable_' + fieldInfo)[0];
            var promptField = document.getElementsByClassName('prompt_' + fieldInfo)[0];
            if (disableField) {
                if (textField && textField.value.length > 0) {
                    disableField.checked = false;
                    disableField.disabled = true;
                    
                    if (promptField) {
                        promptField.checked = false;
                        promptField.disabled = true;
                    }
                } else {
                    disableField.disabled = false;
                    if (promptField) {
                        promptField.disabled = false;
        
                        if (disableField.checked) {
                            promptField.checked = false;
                            promptField.disabled = true;
                        }
                    }
                }
            }
        */
        }
        
        function processPromptField(fieldInfo) {
        /*
            var promptField = document.getElementsByClassName('prompt_' + fieldInfo)[0];
            var textField = document.getElementsByClassName('input_' + fieldInfo)[0];
            var disableField = document.getElementsByClassName('disable_' + fieldInfo)[0];
            if (promptField) {
                if (textField && textField.value.length > 0) {
                    promptField.checked = false;
                    promptField.disabled = true;
                } else {
                    promptField.disabled = false;
        
                    if (disableField) {
                        disableField.disabled = false;
                        
                        if (promptField.checked) {
                            disableField.checked = false;
                            disableField.disabled = true;
                        }
                    }
                }
            }
        */
        }
        
        //populate various input controls with the correct starting value
        //and in the case of picklists need to call out to some Apex code remotely to get the range of values
        function handleFieldSetup(fieldName, fieldType, objType) {
            var defaultValue = document.getElementsByClassName('input_' + fieldName + '_' + objType)[0].value;
        
            if (fieldType == 'multipicklist') {
                document.getElementById('select_' + fieldName + '_' + objType).multiple = true;
                
                $j('#' + 'select_' + fieldName + '_' + objType).css('height', '70px');
                $j('#' + 'select_' + fieldName + '_' + objType).css('vertical-align', 'middle');
                $j('#select_scanbizcards__ProductInterest__c_Lead').next().hide();
            }
        
            if (fieldType == 'multipicklist' || fieldType == 'picklist') {
                getPicklistOptions(fieldName, defaultValue, objType);
            }
        
            if (fieldType == 'checkbox' && defaultValue == '1') {
                document.getElementById('check_' + fieldName + '_' + objType).checked = true;
            }
        }
        
        function getPicklistOptions(fieldName, defaultValue, objType) {
        
            var curSelect = document.getElementById('select_' + fieldName + '_' + objType);
            
            //don't attempt to load picklist values for non picklists
            if (curSelect.style.display == 'none') return;
        
            //this returns the picklist options as newline-separated values
            //and we have the default option(s) passed in as newline-separated values as well
            //so we iterate to create the options and simultaneously decide if we need to populate them
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.EditSettingsCtlr.getOptionsForPicklistField}',
                fieldName, objType,
                function(result, event){
                    if (event.status) {
                        defaults = defaultValue.split("\n");
                        curSelect.options[curSelect.options.length] = new Option('--None--', '');
                        for (var i = 0; i < result.length; i++) {
                            document.getElementById("decodeIt").innerHTML = result[i];
                            stringtodecode = document.getElementById("decodeIt").textContent;
                            curSelect.options[curSelect.options.length] = new Option(stringtodecode,stringtodecode);
        
                            for (var j = 0; j < defaults.length; j++) {
                                
                                if (result[i] == defaults[j]) {
                                    curSelect.options[curSelect.options.length-1].selected = true;
                                }
                            }
                        }
        
                    } else if (event.type === 'exception') {
                        //alert('Exception');
                        document.getElementById("responseErrors").innerHTML = 
                            event.message + "<br/>\n<pre>" + event.where + "</pre>";
                    } else {
                        //alert('some error');
                        document.getElementById("responseErrors").innerHTML = event.message;
                    }
                }, 
                {escape: true}
            );
        }
        
        //when someone checks a checkbox we need to update the underlying input field that is bound to that property
        function updateCheckedValue(checked, fieldName) {
            if (checked) {
                document.getElementsByClassName("input_" + fieldName)[0].value = "1";
                document.getElementsByClassName("prompt_" + fieldName)[0].checked = false;
                document.getElementsByClassName("prompt_" + fieldName)[0].disabled = true;
                document.getElementsByClassName("disable_" + fieldName)[0].checked = false;
                document.getElementsByClassName("disable_" + fieldName)[0].disabled = true;
            } else {
                document.getElementsByClassName("input_" + fieldName)[0].value = "0";
                document.getElementsByClassName("prompt_" + fieldName)[0].disabled = false;
                document.getElementsByClassName("disable_" + fieldName)[0].disabled = false;
            }
        }
        
        //same as above
        function updateDateValue(dateValue, fieldName) {
            document.getElementsByClassName("input_" + fieldName)[0].value = dateValue;
        }
        
        //same as above except here we create a newline-separated list of values
        function updateSelectValue(curSelect, fieldName) {
            var optionStr = "";
            for (i = 0; i < curSelect.length; i++) {
                if (curSelect[i].selected) {
                    optionStr += curSelect[i].value + "\n";
                }
            }
        
            optionStr.replace(/\s+$/g,'');
        
            document.getElementsByClassName("input_" + fieldName)[0].value = optionStr;
            
            if (optionStr && optionStr.length > 1) {
                document.getElementsByClassName("prompt_" + fieldName)[0].checked = false;
                document.getElementsByClassName("prompt_" + fieldName)[0].disabled = true;
                document.getElementsByClassName("disable_" + fieldName)[0].checked = false;
                document.getElementsByClassName("disable_" + fieldName)[0].disabled = true;
            } else {
                document.getElementsByClassName("prompt_" + fieldName)[0].disabled = false;
                document.getElementsByClassName("disable_" + fieldName)[0].disabled = false;
            }
        }
        
        //set correct initial values for the duplicate criteria from the comma-separated string in the hidden bound input field
        function setupDupeCheckboxes(dupeFieldId) {
            var includedFieldsStr = document.getElementById(dupeFieldId).value;
            var includedFields = includedFieldsStr.split(',');
        
            for (i = 0; i < includedFields.length; i++) {
        
                if (includedFields[i] == 'FirstName') {
                    document.getElementById("dupe_FirstName").checked = true;
                } else if (includedFields[i] == 'LastName') {
                    document.getElementById("dupe_LastName").checked = true;
                } else if (includedFields[i] == 'Email') {
                    document.getElementById("dupe_Email").checked = true;
                } else if (includedFields[i] == 'Phone') {
                    document.getElementById("dupe_Phone").checked = true;
                } else if (includedFields[i] == 'Company') {
                    document.getElementById("dupe_Company").checked = true;
                }
            }
        }
        
        //when someone changes a dupe criteria checkbox, reflect that in a new comma-separate string in the hidden bound input field
        function updateDupeValue(dupeFieldId) {
            var finStr = "";
            if (document.getElementById("dupe_FirstName").checked) {
                finStr += "FirstName,";
            }
            if (document.getElementById("dupe_LastName").checked) {
                finStr += "LastName,";
            }
            if (document.getElementById("dupe_Phone").checked) {
                finStr += "Phone,";
            }
            if (document.getElementById("dupe_Email").checked) {
                finStr += "Email,";
            }
            if (document.getElementById("dupe_Company").checked) {
                finStr += "Company,";
            }
        
            finStr = finStr.replace(/,$/g,'');
        
            document.getElementById(dupeFieldId).value = finStr;
        }
        
        //when we encounter new users or queues, we create a new Settings_LeadOwner__c object but since we can't set the Owner property directly
        //to the Id of the user or queue, we can't automatically pull in owner properties like e-mail, so we use remoting to fill it in.
        //When we load an existing Settings_LeadOwner__c object from the DB however, we can pull in owner properties so this is unnecessary
        function updateLeadOwnerEmail(leadOwnerId, leadOwnerType) {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.EditSettingsCtlr.getEmailForLeadOwner}',
                leadOwnerId, leadOwnerType,
                function(result, event){
                    if (event.status) {
                        document.getElementById(leadOwnerId).innerHTML = result;
                    } else if (event.type === 'exception') {
                        alert('Exception ' + event.message + ' ' + event.where);
                        document.getElementById("responseErrors").innerHTML = 
                            event.message + "<br/>\n<pre>" + event.where + "</pre>";
                    } else {
                        alert('some error');
                        document.getElementById("responseErrors").innerHTML = event.message;
                    }
                }, 
                {escape: true}
            );
        }
        
        function collapseExpand(tableId, linkRef) {
            if (document.getElementById(tableId).style.display == 'none') {
                document.getElementById(tableId).style.display = '';
                linkRef.innerHTML = 'Collapse';
            } else {
                document.getElementById(tableId).style.display = 'none';
                linkRef.innerHTML = 'Expand';
            }
            return false;
        }
        
        function showRefreshControls(btn) {
            document.getElementById('imgSpinner').style.display = '';
            document.getElementById('refreshStatus').innerHTML = 'Initiated';
            apexJobId = '';
            document.getElementById('refreshStatus').style.display = '';
            btn.style.display = 'none';
        }
        
        function hideRefreshControls() {
            document.getElementById('imgSpinner').style.display = 'none';
            document.getElementById('refreshStatus').style.display = 'none';
        }
        
        function refreshAccounts(settingIdOutputPanel) {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.EditSettingsCtlr.refreshAccounts}',
                document.getElementById(settingIdOutputPanel).innerHTML,
                function(result, event){
                    if (event.status) {
                        apexJobId = result;
                        if (apexJobId != null && apexJobId.length > 0) {
                            alert('Account refresh has been initiated. This process can take several seconds to several minutes depending on the number of Accounts in your organization as well as available server resources. You do not need to stay on this page for the job to complete. If you close this page, you can check the status of the job in Setup->Monitoring->Apex Jobs');
                            window.setTimeout(queryJobStatus, 5000);
                        } else {
                            alert('There was a problem initiating the Account refresh.');
                            hideRefreshControls();
                        }
                    } else if (event.type === 'exception') {
                        alert('Exception ' + event.message + ' ' + event.where);
                        document.getElementById("responseErrors").innerHTML = 
                            event.message + "<br/>\n<pre>" + event.where + "</pre>";
                        
                        hideRefreshControls();
                    } else {
                        alert('some error');
                        document.getElementById("responseErrors").innerHTML = event.message;
        
                        hideRefreshControls();
                    }
                }, 
                {escape: true}
            );
        }
        
        function queryJobStatus() {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.EditSettingsCtlr.checkJobStatus}',
                apexJobId,
                function(result, event){
                    if (event.status) {
                        if (result == null) {
                            alert('There was a problem refreshing your Accounts.');
                            hideRefreshControls();
        
                        } else {
                            if (result == 'Completed') {
                                alert('Account refresh completed.');
                                hideRefreshControls();
                                reloadAccounts();
                            
                            } else if (result == 'Failed') {
                                alert('Account refresh failed.');
                                hideRefreshControls();
                            
                            } else if (result == 'Aborted') {
                                alert('Account refresh was aborted.');
                                hideRefreshControls();
        
                            } else {
                                document.getElementById('refreshStatus').innerHTML = result;
                                window.setTimeout(queryJobStatus, 5000);
                            }
                        }
        
                    } else if (event.type === 'exception') {
                        alert('Exception ' + event.message + ' ' + event.where);
                        document.getElementById("responseErrors").innerHTML = event.message + "<br/>\n<pre>" + event.where + "</pre>";
        
                        hideRefreshControls();
                    } else {
                        alert('some error');
                        document.getElementById("responseErrors").innerHTML = event.message;
        
                        hideRefreshControls();
                    }
                }, 
                {escape: true}
            );
        }
        
        function startLoadingAccounts(btn) {
            console.log('ame');
            $j('#loadingNextSet').show();

            if (btn != null) {
                btn.disabled = true;
            }
        }
        
        function finishLoadingAccounts() {
            $j('#loadingNextSet').hide();
        }
        
        function startLoadingCampaigns(btn) {
            $j('#loadingNextSetCamp').show();

            if (btn != null) {
                btn.disabled = true;
            }
        }
        
        function finishLoadingCampaigns() {
            $j('#loadingNextSetCamp').hide();
        }
        
        function startLoadingLeadOwners(btn) {
            $j('#loadingNextSetLO').show();

            if (btn != null) {
                btn.disabled = true;
            }
        }
        
        function finishLoadingLeadOwners() {
            $j('#loadingNextSetLO').hide();
        }
        
        function attachSearch() {
            $j('#searchAvailable').keyup(function(e) {
                if(e.which == 13) {
                    $j('.searchAvilTypes').click();
                }
            });

            $j('.searchAvilTypes').click(function(){
                var type = $j('#searchAvailable').data('type');
                var criteria = $j('#searchAvailable').val();
                var excludeIDs = '';

                $j('#selectedListItems li a').each(function() {
                    if (excludeIDs === '') {
                        excludeIDs = $j(this).data('id');
                    } else {
                        excludeIDs += '|' + $j(this).data('id');
                    }
                });

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.EditSettingsCtlr.getAvailableTypes}',
                    criteria, type, excludeIDs,
                    function(result, event){
                        $j('#availableListItems').empty();

                        document.getElementsByClassName('avilDropdown')[0].value = '';
                        document.getElementsByClassName('avilDropdown1')[0].value = '';

                        if ($j.isEmptyObject(result)) {
                            $j('#availableListItems').append('<li>No record found</li>');
                        }



                        for (item in result) {
                            $j('#availableListItems').append('<li><a href="#" onclick="applySelect(this, false);return false;" data-id="' + item + '" data-name="' + result[item] + '">' + result[item] + '</a></li>');
                        }

                        $j('#availableType').tinyscrollbar().data("plugin_tinyscrollbar").update();
                    }, 
                    {escape: false}
                );
            });
            
            $j('#searchSelected').keyup(function(){
                var valThis = $j(this).val().toLowerCase();
                $j('#selectedListItems>li').each(function(){
                    var text = $j(this).text().toLowerCase();
                    (text.indexOf(valThis) == 0) ? $j(this).show() : $j(this).hide();
                });
                $j('#selectedType').tinyscrollbar().data("plugin_tinyscrollbar").update();
            });
        }
        
        
        function getRecordTypeOptions(id, recordTypeID) {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.EditSettingsCtlr.getOptionsForRecordTypes}',
                recordTypeID,
                function(result, event){
                    if (event.status) {
                        $j('.htmlMe_' + id ).html(result);
                    } else if (event.type === 'exception') {
                        //alert('Exception');
                        document.getElementById("responseErrors").innerHTML = 
                            event.message + "<br/>\n<pre>" + event.where + "</pre>";
                    } else {
                        //alert('some error');
                        document.getElementById("responseErrors").innerHTML = event.message;
                    }
                }, 
                {escape: false}
            );
        }
        
    </script>
    <apex:form id="myForm">
        <span id="decodeIt" style="Display:none;"></span>
        <apex:actionFunction name="updateRecordTypeMapping" action="{!updateRecordType}" oncomplete="setTimeout(function() {applyScrollbar();updateScrollbar();}, 3000);" rerender="accountDropdown,personAccountDropdown,leadDropdown,contactDropdown" >
            <apex:param name="firstParam" assignTo="{!jsonStr}" value="" />
        </apex:actionFunction>
        <apex:actionFunction action="{!configurePeronAccountSetting}" name="rerenderPersonAccount" oncomplete="setTimeout(function() {applyScrollbar();updateScrollbar();}, 1000);" rerender="personAccountSection" />
        
        <apex:actionFunction action="{!fetchLeadList}" name="fetchLeadList"
                             
                             oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners();"
                             rerender="leadTopPaginationSection,leadBottomPaginationSection,leadOwnersTable" />

        <apex:actionFunction action="{!fetchAccountList}" name="fetchAccountList"
                             
                             oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();"
                             rerender="largeAccountControlsBlock,acctTopPaginationSection,acctBottomPaginationSection,accountTable" />
                             
        <apex:actionFunction action="{!fetchCampaignList}" name="fetchCampaignList" 
                             
                             oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns();"
                             rerender="campaignTopPagination,campaignBottomPagination,CampaignsTable" />
        
        <div class="header">
            <div class="logoSection">
                <apex:image url="{!URLFOR($Resource.scanbizcards__ScanBizCardsPackage, 'SBC_Logo_White.png')}"/>
            </div>
            <div class="linkSection">
                <span class="started"><a href="https://appexchange.salesforce.com/servlet/servlet.FileDownload?file=00P3000000KZQynEAH" target="_blank">Getting Started</a></span>
                <span class="support"><a href="http://support.circleback.com" target="_blank">Support</a></span>
            </div>
        </div>

        <apex:outputPanel id="messagesBlock">
            <apex:outputPanel styleClass="error" layout="block" rendered="{!errorMessages != null}">
                Required fields in red need your attention.
                <apex:inputHidden id="hiddenErrorMessage" value="{!errormessages}" />
                <apex:outputPanel styleclass="hiddenMessage" style="display:none">
                    <apex:pageMessages />
                </apex:outputPanel>
            </apex:outputPanel>
        </apex:outputPanel>
        
        <div class="topSection">
            <div class="topHeader">
                <span>Editing Settings - {!IF(ISBLANK(setting.Id), 'New', setting.Name)}</span>
            </div>
            <div class="buttons">
                <apex:commandLink styleClass="customButton" style="margin-right:20px;" value="Cancel" onclick="popup(); return false;" />
                <apex:commandLink styleClass="customButton" value="Save" action="{!onSave}" />
            </div>
                
            <apex:outputPanel rendered="{!setting.Name != 'Default'}" layout="block" styleclass="topConfigOptions">
                <div class="input-group">
                    <span class="label">Name</span>
                    <apex:inputField value="{!setting.Name}" id="name" style="width:50%;"/>
                    <i class="fa fa-question-circle tooltip" data-description="The name of this settings profile. This will only be visible to administrators."></i>
                </div>
                <div class="input-group">
                    <span class="label" style="margin-right: 12px;">Type</span>
                    <apex:inputField value="{!setting.scanbizcards__Type__c}" id="type" onchange="onChangeType();displayValidating(true);" rendered="{!setting.Name != 'Default'}" style="width: 20%;" styleClass="typeSelector" />
                    <i class="fa fa-sort sort"></i>
                    <i class="fa fa-question-circle tooltip" data-description="Specify whether this settings profile applies to individual users, roles, user profile, or permission set types." style="display: {!IF(setting.Name == 'Default','none','')}"></i>
                </div>
                
                <apex:actionFunction name="onChangeType" action="{!onChangeType}" onComplete="applyScrollbar();attachSearch();displayValidating(false);" reRender="selectLabel,availableList,selectedList,hiddenContent"/>
                
                <apex:outputPanel styleClass="labelContent" id="selectLabel" layout="block">
                    <div>
                        Available {!setting.scanbizcards__Type__c}
                        <span style="float:right;border: 1px solid #dedede; border-radius:3px;height:23px;padding: 2px;">
                            <input id="searchAvailable" type="text" placeholder="Search Available" style="border: 0px;" data-type="{!setting.scanbizcards__Type__c}" />
                            <i class="fa fa-search searchAvilTypes" style="margin-left:-2px;cursor:pointer;z-index:2;"></i>
                        </span>
                    </div>
                    <div class="space">&nbsp;</div>
                    <div>
                        Selected {!setting.scanbizcards__Type__c}
                        <apex:outputPanel styleClass="validating3" style="display:none;"><img src="{!$Resource.AnimatedSpinner}" /> &nbsp;&nbsp;Validating...</apex:outputPanel>
                         <apex:outputPanel id="validateFields">
                             <apex:outputPanel rendered="{!!ISBLANK(validationErrorMessage)}"><i class="fa fa-question-circle tooltip" data-description="{!validationErrorMessage}" /></apex:outputPanel>
                         </apex:outputPanel>
                         <span style="float:right;border: 1px solid #dedede; border-radius:3px;height:23px;padding: 2px;">
                            <input id="searchSelected" type="text" placeholder="Search Selected" style="border: 0px;" />
                            <i class="fa fa-search searchSelTypes" style="margin-left:-2px;cursor:pointer;z-index:2;"></i>
                         </span>
                    </div>
                </apex:outputPanel>
                
                <apex:outputPanel styleClass="availableList" id="availableList" layout="block">
                    <div id="availableType" class="customScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <ul id="availableListItems">
                                    <li>Please use the search function to find {!setting.scanbizcards__Type__c}</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
                <div class="moveOptions">
                    <div class="upperIconContainer">
                        <apex:commandLink action="{!onSelectFromAvailable}" onclick="displayValidating(true);" styleClass="typeSelector2" onComplete="validateTypes();" rerender="assignments,messagesBlock">
                            <i class="fa fa-chevron-right"></i>
                        </apex:commandLink>
                    </div>
                    <div style="clear:both;"><span class="typeSelectorLoading" style="display:none;"><img src="{!$Resource.AnimatedSpinner}" /> processing...</span></div>
                    <div class="lowerIconContainer">
                        <apex:commandLink action="{!onSelectFromCurrent}" onclick="displayValidating(true);" styleClass="typeSelector2" onComplete="validateTypes();" rerender="assignments,messagesBlock">
                            <i class="fa fa-chevron-left"></i>
                        </apex:commandLink>
                    </div>
                </div>
                <apex:outputPanel styleClass="selectedList" id="selectedList" layout="block">
                    <div id="selectedType" class="customScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <ul id="selectedListItems">
                                    <apex:repeat value="{!currentAssignments}" var="option">
                                        <li><a href="#" onclick="applySelect(this, true);return false;" data-id="{!option.value}" data-name="{!option.label}">{!option.label}</a></li>
                                    </apex:repeat>
                                </ul>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
                
                <apex:outputPanel id="hiddenContent" style="display:none" layout="block">
                    <apex:inputText styleClass="avilDropdown" value="{!selectedValues}" />
                    <apex:inputText styleClass="avilDropdown1" value="{!selectedTexts}" />
                    <apex:selectList id="avilDropdown" value="{!selectedFromAvailable}" multiselect="true">
                        <apex:selectOptions value="{!availableAssignments}" />
                    </apex:selectList>
                    <apex:selectList id="curDropdown" value="{!selectedFromCurrent}" multiselect="true">
                        <apex:selectOptions value="{!currentAssignments}" />
                    </apex:selectList>
                </apex:outputPanel>
                <!-- MXA: PT#75226422 - At time of Admin Panel Provisioning - check if User, Profile, or Role hasve access to the necessary objects -->
                <apex:actionFunction action="{!buildAcccessValidationMessage}"
                                     name="validateTypes"
                                     oncomplete="displayValidating(false);$j('.avilDropdown').val('');updateScrollbar();attachSearch();"
                                     rerender="selectLabel,availableList,selectedList,validateFields,hiddenContent" />
            </apex:outputPanel>
            
            
            <div class="menu">
                <ul>
                    <li class="active"><a onclick="changeWorkingArea(this);return false;" href="#">Configuration<br/>Options</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Account<br/>Options</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Lead<br/>Options</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Contact<br/>Options</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Duplicate<br/>Criteria</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Campaigns</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Accounts</a></li>
                    <li><a onclick="changeWorkingArea(this);return false;" href="#">Lead<br/>Owners</a></li>
                </ul>
            </div>
        </div>
        
        <div class="configOptions">
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 50%;">
                                <p>Option</p>
                            </div>
                            <div class="headerCell" style="width: 20%;">
                                <p>Value</p>
                            </div>
                            <div class="headerCell" style="width: 30%;">
                                <p>User can modify<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies whether the user can override this property within the app." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="configOptions" class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <div class="Row">
                                    <div class="Cell" style="width: 50%;">{!$ObjectType.Settings_Profile__c.fields.Export_as__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether scanned data exports as a Lead Or Contact."></i></div>
                                    <div class="Cell" style="width: 20%;"><apex:inputField value="{!setting.scanbizcards__Export_as__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell" style="width: 30%;"><apex:inputField value="{!setting.scanbizcards__Export_as_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Use_2_letter_country_code__c.Label}<i class="fa fa-question-circle tooltip" data-description="For any addresses detected on the card, attempt to export using a 2 letter country code instead of full country name. If you have State & Country picklists enabled, turn this setting off."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Use_2_letter_country_code__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Use_2_letter_country_code_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Use_2_letter_state_code__c.Label}<i class="fa fa-question-circle tooltip" data-description="For any addresses detected on the card, attempt to export using a 2 letter state code instead of full state name. If you have State & Country picklists enabled, turn this setting off."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Use_2_letter_state_code__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Use_2_letter_state_code_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Attach_image_to_export__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether to attach the image of the business card to the Contact or Lead record that is created."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Attach_image_to_export__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Attach_image_to_export_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Export_after_scan__c.Label}<i class="fa fa-question-circle tooltip" data-description="When enabled, the default action shown to users after scanning is Export to Salesforce, rather than Add to Address Book."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Export_after_scan__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Export_after_scan_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Prompt_to_export_later__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user should be prompted if they want to export immediately or export later (for situations where they do not have connectivity, for example)."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Prompt_to_export_later__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Prompt_to_export_later_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Update_duplicates__c.Label}<i class="fa fa-question-circle tooltip" data-description="If a duplicate record is detected should the scanned data be added to the existing Contact or Lead?"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Update_duplicates__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Update_duplicates_user_mod__c}" style="width: 30%;" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Allow_Duplicate_Search__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user can search only the current exported object type or across all."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Allow_Duplicate_Search__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Data_can_be_shared__c.Label}<i class="fa fa-question-circle tooltip" data-description="Smart OCR improves user experience by automatically making corrections to your scan using recent scans of the card generated by our user base. By participating in Smart OCR, accuracy as well as account name association are greatly improved."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Data_can_be_shared__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Hide_store_as_default__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the option is shown during an export to save the data the user enters for custom fields as the default value (within the app only) for that field."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Hide_store_as_default__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Require_Account_for_Contact__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to export Contacts without selecting an existing Account or creating a new Account."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Require_Account_for_Contact__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.User_can_modify_fields__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the App user can modify standard or custom fields during export."></i></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__User_can_modify_fields__c}" /><i class="fa fa-sort sort"></i></div>
                                    <div class="Cell"></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.User_can_modify_campaigns__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to override the Campaign settings." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__User_can_modify_campaigns__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.User_can_modify_lead_owners__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to override the Lead Owner settings specified below." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__User_can_modify_lead_owners__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.BCC_to_Salesforce__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user autopopulates their BCC to Salesforce email when using Quick Intro Email within the app." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__BCC_to_Salesforce__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Use_Assignment_Rule__c.Label}<i class="fa fa-question-circle tooltip" data-description="When enabled, the application will then follow the assignment rules during the creation of the new record." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Use_Assignment_Rule__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Prompt_For_Object_Selection__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to choose between Lead/Contact or not during an export." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Prompt_For_Object_Selection__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                <div class="Row">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.User_can_create_accounts__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to create new Accounts during an export." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__User_can_create_accounts__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                                 <div class="Row" id="personAccountEnable">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Allow_Person_Account__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is able to create new Account as a Person Account during an export. (Note: Salesforce needs to enable Person Account in your organization.)" /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Allow_Person_Account__c}" onchange="displayPersonAccountOnly($j(this).val());"/><i class="fa fa-sort sort"></i></div>
                                </div>
                                 <div class="Row" id="personAccountOnly" style="display:none;">
                                    <div class="Cell">{!$ObjectType.Settings_Profile__c.fields.Person_Account_Only__c.Label}<i class="fa fa-question-circle tooltip" data-description="Whether the user is force to create a Account as a Person Account." /></div>
                                    <div class="Cell"><apex:inputField value="{!setting.scanbizcards__Person_Account_Only__c}" /><i class="fa fa-sort sort"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="AccountOptions">
            <apex:outputPanel layout="block" styleclass="reuglarAccount">
                <div class="label">
                    <span>Account Standard Fields</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 25%;">
                                    <p>Name</p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                                </div>
                                <div class="headerCell" style="width: 24%;">
                                    <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                                </div>
                                <div class="headerCell" style="width: 18%;">
                                    <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                                </div>
                                <div class="headerCell" style="width: 13%;">
                                    <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="acctStandard" class="customTableScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!accountStandardFieldList}" var="field">
                                        <div class="Row">
                                            <div class="Cell" style="width: 25%;">
                                                {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                                </div>
                                            </div>
                                            <div class="Cell" style="width: 24%;">
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                    <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')}; vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');setCaretToPos(this, 1);" />
                                                    
                                                    <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                        <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                    </div>
                                                    
                                                    <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                    <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                    
                                                    <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                        
                                                    <script language="JavaScript">
                                                        handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                    </script>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                    <i>Automatically set by ScanBizCards</i>
                                                </apex:outputPanel>
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                            <div class="Cell" style="width: 18%;">
                                                <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                            </div>
                                            <div class="Cell" style="width: 13%;">
                                                <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="spacer"></div>
                <div class="label">
                    <span>Account Custom Fields</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 25%;">
                                    <p>Name</p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                                </div>
                                <div class="headerCell" style="width: 24%;">
                                    <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                                </div>
                                <div class="headerCell" style="width: 18%;">
                                    <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                                </div>
                                <div class="headerCell" style="width: 13%;">
                                    <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div  id="acctCustom" class="customTableScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!accountCustomFieldList}" var="field">
                                        <div class="Row">
                                            <div class="Cell" style="width: 25%;">
                                                {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                                </div>
                                            </div>
                                            <div class="Cell" style="width: 24%;">
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                    <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                    
                                                    <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                        <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                    </div>
                                                    
                                                    <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                    <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                    
                        
                                                    <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                        
                                                    <script language="JavaScript">
                                                        handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                    </script>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                    <i>Automatically set by ScanBizCards</i>
                                                </apex:outputPanel>
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                            <div class="Cell" style="width: 18%;">
                                                <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                            </div>
                                            <div class="Cell" style="width: 13%;">
                                                <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel rendered="{!isRecordTypeAndPermAvailable}">
                    <div class="spacer"></div>
                    <div class="label">
                        <span>Account Record Types</span>
                    </div>
                    <div class="tableSection">
                        <div class="headerContent">
                            <div class="Table1">
                                <div class="Heading">
                                    <div class="headerCell" style="width: 35%;">
                                        <p>Record Type Name</p>
                                    </div>
                                    <div class="headerCell" style="width: 8%;">
                                        <p>Available<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should be available in the export." /></p>
                                    </div>
                                    <div class="headerCell" style="width: 8%;">
                                        <p>Default<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should default in the export." /></p>
                                    </div>
                                    <div class="headerCell" style="width: 49%;">
                                        <p>Available dropdown Fields<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="The adminstrator needs to update the setting if the Record Type updates." /></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="accountRecordType" class="customTableScrollbar">
                            <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                            <div class="viewport">
                                <div class="overview">
                                    <div class="Table2">
                                        <apex:repeat value="{!accountRecordTypes}" var="recordType">
                                            <div class="Row">
                                                <div class="Cell" style="width: 35%;">
                                                     <apex:outputText value="{!recordType.Name}" />
                                                </div>
                                                <div class="Cell" style="width: 8%;">
                                                    <apex:inputField value="{!recordType.scanbizcards__Available__c}" onclick="verifyRecordType(this, '{!JSENCODE(recordType.scanbizcards__Record_Type_Id__c)}_{!JSENCODE(recordType.scanbizcards__SObject_Type__c)}');" />
                                                </div>
                                                <div class="Cell" style="width: 8%;">
                                                    <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == true}">
                                                        <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" checked="true" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == false}">
                                                        <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                    </apex:outputPanel>
                                                    <apex:inputField style="display:none;" value="{!recordType.scanbizcards__Default__c}" styleClass="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" />
                                                </div>
                                                <div class="Cell" style="width: 49%;">
                                                    <apex:outputPanel id="accountDropdown2">
                                                        <div class="htmlMe_{!JSENCODE(recordType.ID)}"></div>
                                                        <script>getRecordTypeOptions('{!JSENCODE(recordType.ID)}', '{!JSENCODE(recordType.Record_Type_Id__c)}');</script>
                                                    </apex:outputPanel>
                                                </div>
                                            </div>
                                        </apex:repeat>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
            </apex:outputPanel>
            <apex:outputPanel layout="block" id="personAccountSection" styleclass="personAccountSectionCls">
                <div class="label">
                    <span>Person Account Standard Fields</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 25%;">
                                    <p>Name</p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                                </div>
                                <div class="headerCell" style="width: 24%;">
                                    <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                                </div>
                                <div class="headerCell" style="width: 18%;">
                                    <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                                </div>
                                <div class="headerCell" style="width: 13%;">
                                    <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div  id="pAcctStandard" class="customTableScrollbar personAccountTable">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!personAccountStandardFieldList}" var="field">
                                        <div class="Row">
                                            <div class="Cell" style="width: 25%;">
                                                {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                                </div>
                                            </div>
                                            <div class="Cell" style="width: 24%;">
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                    <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                    
                                                    <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                        <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                    </div>
                                                    
                                                    <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                    <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                    
                                                    <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                        
                                                    <script language="JavaScript">
                                                        handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                    </script>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                    <i>Automatically set by ScanBizCards</i>
                                                </apex:outputPanel>
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                <script language="JavaScript">
                                                    processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                            <div class="Cell" style="width: 18%;">
                                                <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                            </div>
                                            <div class="Cell" style="width: 13%;">
                                                <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="spacer"></div>
                <div class="label">
                    <span>Person Account Custom Fields</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 25%;">
                                    <p>Name</p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                                </div>
                                <div class="headerCell" style="width: 24%;">
                                    <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 10%;">
                                    <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                                </div>
                                <div class="headerCell" style="width: 18%;">
                                    <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                                </div>
                                <div class="headerCell" style="width: 13%;">
                                    <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div  id="pAcctCustom" class="customTableScrollbar personAccountTable">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!personAccountCustomFieldList}" var="field">
                                        <div class="Row">
                                            <div class="Cell" style="width: 25%;">
                                                {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                                </div>
                                            </div>
                                            <div class="Cell" style="width: 24%;">
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                    <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                    
                                                    <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                        <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                    </div>
                                                    
                                                    <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                    <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                    
                        
                                                    <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                        
                                                    <script language="JavaScript">
                                                        handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                    </script>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                    <i>Automatically set by ScanBizCards</i>
                                                </apex:outputPanel>
                                            </div>
                                            <div class="Cell" style="width: 10%;">
                                                <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                            <div class="Cell" style="width: 18%;">
                                                <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                            </div>
                                            <div class="Cell" style="width: 13%;">
                                                <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                                <script language="JavaScript">
                                                    processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                                </script>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel rendered="{!isRecordTypeAndPermAvailable}">
                    <div class="spacer"></div>
                    <div class="label">
                        <span>Person Account Record Types</span>
                    </div>
                    <div class="tableSection">
                        <div class="headerContent">
                            <div class="Table1">
                                <div class="Heading">
                                    <div class="headerCell" style="width: 35%;">
                                        <p>Record Type Name</p>
                                    </div>
                                    <div class="headerCell" style="width: 8%;">
                                        <p>Available<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should be available in the export." /></p>
                                    </div>
                                    <div class="headerCell" style="width: 8%;">
                                        <p>Default<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should default in the export." /></p>
                                    </div>
                                    <div class="headerCell" style="width: 49%;">
                                        <p>Available dropdown Fields<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="The adminstrator needs to update the setting if the Record Type updates." /></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div  id="pAcctRecordType" class="customTableScrollbar personAccountTable">
                            <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                            <div class="viewport">
                                <div class="overview">
                                    <div class="Table2">
                                        <apex:repeat value="{!personAccountRecordTypes}" var="recordType">
                                            <div class="Row">
                                                <div class="Cell" style="width: 35%;">
                                                     <apex:outputText value="{!recordType.Name}" />
                                                </div>
                                                <div class="Cell" style="width: 8%;">
                                                    <apex:inputField value="{!recordType.scanbizcards__Available__c}" onclick="verifyRecordType(this, '{!JSENCODE(recordType.scanbizcards__Record_Type_Id__c)}_{!JSENCODE(recordType.scanbizcards__SObject_Type__c)}');" />
                                                </div>
                                                <div class="Cell" style="width: 8%;">
                                                    <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == true}">
                                                        <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" checked="true" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == false}">
                                                        <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                    </apex:outputPanel>
                                                    <apex:inputField style="display:none;" value="{!recordType.scanbizcards__Default__c}" styleClass="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" />
                                                </div>
                                                <div class="Cell" style="width: 49%;">
                                                    <apex:outputPanel id="personAccountDropdown2">
                                                        <div class="htmlMe_{!JSENCODE(recordType.ID)}"></div>
                                                        <script>getRecordTypeOptions('{!JSENCODE(recordType.ID)}', '{!JSENCODE(recordType.Record_Type_Id__c)}');</script>
                                                    </apex:outputPanel>
                                                </div>
                                            </div>
                                        </apex:repeat>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
            </apex:outputPanel>
        </div>
        <div class="ContactOptions">
            <div class="label">
                <span>Contact Standard Fields</span>
            </div>
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 25%;">
                                <p>Name</p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                            </div>
                            <div class="headerCell" style="width: 24%;">
                                <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                            </div>
                            <div class="headerCell" style="width: 18%;">
                                <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                            </div>
                            <div class="headerCell" style="width: 13%;">
                                <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="contactStandard" class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!contactStandardFieldList}" var="field">
                                    <div class="Row">
                                        <div class="Cell" style="width: 25%;">
                                            {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                            </div>
                                        </div>
                                        <div class="Cell" style="width: 24%;">
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                
                                                <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                    <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                </div>
                                                <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                
                    
                                                <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                    
                                                <script language="JavaScript">
                                                    handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                </script>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                <i>Automatically set by ScanBizCards</i>
                                            </apex:outputPanel>
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                        <div class="Cell" style="width: 18%;">
                                            <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                            <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                        </div>
                                        <div class="Cell" style="width: 13%;">
                                            <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="spacer"></div>
            <div class="label">
                <span>Contact Custom Fields</span>
            </div>
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 25%;">
                                <p>Name</p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                            </div>
                            <div class="headerCell" style="width: 24%;">
                                <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                            </div>
                            <div class="headerCell" style="width: 18%;">
                                <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                            </div>
                            <div class="headerCell" style="width: 13%;">
                                <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="contactCustom" class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!contactCustomFieldList}" var="field">
                                    <div class="Row">
                                        <div class="Cell" style="width: 25%;">
                                            {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                            </div>
                                        </div>                                        
                                        <div class="Cell" style="width: 24%;">
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                
                                                <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                    <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                </div>
                                                
                                                <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                
                    
                                                <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                    
                                                <script language="JavaScript">
                                                    handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                </script>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                <i>Automatically set by ScanBizCards</i>
                                            </apex:outputPanel>
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                        <div class="Cell" style="width: 18%;">
                                            <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                            <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                        </div>
                                        <div class="Cell" style="width: 13%;">
                                            <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <apex:outputPanel rendered="{!isRecordTypeAndPermAvailable}">
                <div class="spacer"></div>
                <div class="label">
                    <span>Contact Record Types</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 35%;">
                                    <p>Record Type Name</p>
                                </div>
                                <div class="headerCell" style="width: 8%;">
                                    <p>Available<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should be available in the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 8%;">
                                    <p>Default<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should default in the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 49%;">
                                    <p>Available dropdown Fields<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="The adminstrator needs to update the setting if the Record Type updates." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="contactRecordType" class="customTableScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!contactRecordTypes}" var="recordType">
                                        <div class="Row">
                                            <div class="Cell" style="width: 35%;">
                                                 <apex:outputText value="{!recordType.Name}" />
                                            </div>
                                            <div class="Cell" style="width: 8%;">
                                                <apex:inputField value="{!recordType.scanbizcards__Available__c}" onclick="verifyRecordType(this, '{!JSENCODE(recordType.scanbizcards__Record_Type_Id__c)}_{!JSENCODE(recordType.scanbizcards__SObject_Type__c)}');" />
                                            </div>
                                            <div class="Cell" style="width: 8%;">
                                                <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == true}">
                                                    <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" checked="true" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == false}">
                                                    <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                </apex:outputPanel>
                                                <apex:inputField style="display:none;" value="{!recordType.scanbizcards__Default__c}" styleClass="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" />
                                            </div>
                                            <div class="Cell" style="width: 49%;">
                                                <apex:outputPanel id="contactDropdown2">
                                                    <div class="htmlMe_{!JSENCODE(recordType.ID)}"></div>
                                                    <script>getRecordTypeOptions('{!JSENCODE(recordType.ID)}', '{!JSENCODE(recordType.Record_Type_Id__c)}');</script>
                                                </apex:outputPanel>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </apex:outputPanel>
        </div>
        <div class="LeadOptions">
            <div class="label">
                <span>Lead Standard Fields</span>
            </div>
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 25%;">
                                <p>Name</p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                            </div>
                            <div class="headerCell" style="width: 24%;">
                                <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                            </div>
                            <div class="headerCell" style="width: 18%;">
                                <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                            </div>
                            <div class="headerCell" style="width: 13%;">
                                <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="leadStandard" class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!leadStandardFieldList}" var="field">
                                    <div class="Row">
                                        <div class="Cell" style="width: 25%;">
                                            {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                            </div>
                                        </div>                                        
                                        <div class="Cell" style="width: 24%;">
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                
                                                <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                    <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                </div>
                                                
                                                <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                
                    
                                                <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                    
                                                <script language="JavaScript">
                                                    handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                </script>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                <i>Automatically set by ScanBizCards</i>
                                            </apex:outputPanel>
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                        <div class="Cell" style="width: 18%;">
                                            <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                            <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                        </div>
                                        <div class="Cell" style="width: 13%;">
                                            <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="spacer"></div>
            <div class="label">
                <span>Lead Custom Fields</span>
            </div>
            <div id="leadCustom" class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 25%;">
                                <p>Name</p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <P>Include<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the field should be included in the export."/></P>
                            </div>
                            <div class="headerCell" style="width: 24%;">
                                <p>Default for Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the default value for this field during the export." /></p>
                            </div>
                            <div class="headerCell" style="width: 10%;">
                                <p>Prompt Value<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the user should be prompted to provide a value for this field during each export."/></p>
                            </div>
                            <div class="headerCell" style="width: 18%;">
                                <p>Map From<br/>Scanned Field<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the app should attempt to automatically populate this field based on a specified scanned item." /></p>
                            </div>
                            <div class="headerCell" style="width: 13%;">
                                <p>Disable<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Disables the field from being exported during the export." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!leadCustomFieldList}" var="field">
                                    <div class="Row">
                                        <div class="Cell" style="width: 25%;">
                                            {!field.scanbizcards__Label__c} ({!field.scanbizcards__FieldType__c})
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                <apex:inputField value="{!field.scanbizcards__Include__c}" styleClass="include_{!field.Name}_{!field.scanbizcards__SObjectType__c}" />
                                            </div>
                                        </div>                                        
                                        <div class="Cell" style="width: 24%;">
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == false}">
                                                <apex:inputField style="display: {!IF(field.scanbizcards__FieldType__c == 'text', '', 'none')};vertical-align:middle; height:30px;" value="{!field.scanbizcards__Default_Value__c}" styleClass="input_{!field.Name}_{!field.scanbizcards__SObjectType__c}" html-rows="1" html-cols="30" onblur="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');;" />
                                                
                                                <div class="customCheckBox2" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}">
                                                    <input type="checkbox" style="display: {!IF(field.FieldType__c == 'checkbox', '', 'none')}" id="check_{!field.Name}_{!field.SObjectType__c}" onchange="updateCheckedValue(this.checked, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                                                </div>
                                                
                                                <select style="display: {!IF(field.FieldType__c == 'picklist' || field.FieldType__c == 'multipicklist', '', 'none')};"  id="select_{!field.Name}_{!field.SObjectType__c}" onchange="updateSelectValue(this, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')"></select>
                                                <i class="fa fa-sort sort" style="display: {!IF(field.FieldType__c == 'picklist', '', 'none')};"></i>
                                                
                    
                                                <input type="date" style="display: {!IF(field.FieldType__c == 'date', '', 'none')}" value="{!field.scanbizcards__Default_Value__c}" onchange="updateDateValue(this.value, '{!JSENCODE(field.Name)}_{!JSENCODE(field.SObjectType__c)}')" />
                    
                                                <script language="JavaScript">
                                                    handleFieldSetup('{!JSENCODE(field.Name)}', '{!JSENCODE(field.FieldType__c)}', '{!JSENCODE(field.SObjectType__c)}');
                                                </script>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!field.scanbizcards__IsProtected__c == true}">
                                                <i>Automatically set by ScanBizCards</i>
                                            </apex:outputPanel>
                                        </div>
                                        <div class="Cell" style="width: 10%;">
                                            <div class="customCheckBox">
                                                    <apex:inputField value="{!field.scanbizcards__Prompt_for_Value__c}" styleClass="prompt_{!field.Name}_{!field.scanbizcards__SObjectType__c}" rendered="{!field.scanbizcards__IsProtected__c == false}" onclick="processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processPromptField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                        <div class="Cell" style="width: 18%;">
                                            <apex:inputField value="{!field.scanbizcards__Set_from_Scan__c}" rendered="{!field.scanbizcards__IsProtected__c == false}"/>
                                            <i class="fa fa-sort sort" style="display: {!IF(field.IsProtected__c == false, '', 'none')};"></i>
                                        </div>
                                        <div class="Cell" style="width: 13%;">
                                            <div class="customCheckBox3">
                                                    <apex:inputField value="{!field.scanbizcards__Disable__c}" styleClass="disable_{!field.Name}_{!field.scanbizcards__SObjectType__c}" onclick="processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');" />
                                                </div>
                                            <script language="JavaScript">
                                                processDisableField('{!JSENCODE(field.Name)}_{!JSENCODE(field.scanbizcards__SObjectType__c)}');
                                            </script>
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <apex:outputPanel rendered="{!isRecordTypeAndPermAvailable}">
                <div class="spacer"></div>
                <div class="label">
                    <span>Lead Record Types</span>
                </div>
                <div class="tableSection">
                    <div class="headerContent">
                        <div class="Table1">
                            <div class="Heading">
                                <div class="headerCell" style="width: 35%;">
                                    <p>Record Type Name</p>
                                </div>
                                <div class="headerCell" style="width: 8%;">
                                    <p>Available<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should be available in the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 8%;">
                                    <p>Default<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Whether the record type should default in the export." /></p>
                                </div>
                                <div class="headerCell" style="width: 49%;">
                                    <p>Available dropdown Fields<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="The adminstrator needs to update the setting if the Record Type updates." /></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="leadRecordType" class="customTableScrollbar">
                        <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                        <div class="viewport">
                            <div class="overview">
                                <div class="Table2">
                                    <apex:repeat value="{!leadRecordTypes}" var="recordType">
                                        <div class="Row">
                                            <div class="Cell" style="width: 35%;">
                                                 <apex:outputText value="{!recordType.Name}" />
                                            </div>
                                            <div class="Cell" style="width: 8%;">
                                                <apex:inputField value="{!recordType.scanbizcards__Available__c}" onclick="verifyRecordType(this, '{!JSENCODE(recordType.scanbizcards__Record_Type_Id__c)}_{!JSENCODE(recordType.scanbizcards__SObject_Type__c)}');" />
                                            </div>
                                            <div class="Cell" style="width: 8%;">
                                                <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == true}">
                                                    <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" checked="true" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!recordType.scanbizcards__Default__c == false}">
                                                    <input type="radio" id="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" name="{!recordType.SObject_Type__c}_checkbox" onclick="document.getElementsByClassName('recordType_{!JSENCODE(recordType.Record_Type_Id__c)}_{!JSENCODE(recordType.SObject_Type__c)}')[0].checked = true;"/>
                                                </apex:outputPanel>
                                                <apex:inputField style="display:none;" value="{!recordType.scanbizcards__Default__c}" styleClass="recordType_{!recordType.scanbizcards__Record_Type_Id__c}_{!recordType.scanbizcards__SObject_Type__c}" />
                                            </div>
                                            <div class="Cell" style="width: 49%;">
                                                <apex:outputPanel id="leadDropdown2">
                                                    <div class="htmlMe_{!JSENCODE(recordType.ID)}"></div>
                                                    <script>getRecordTypeOptions('{!JSENCODE(recordType.ID)}', '{!JSENCODE(recordType.Record_Type_Id__c)}');</script>
                                                </apex:outputPanel>
                                            </div>
                                        </div>
                                    </apex:repeat>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </apex:outputPanel>
        </div>
        <div class="DuplicateCriteria">
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 25%;">
                                <p>Field Name<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="When exporting a scanned card, use the following fields to determine if a duplicate Lead or Contact already exists in your org. Uses exact matching." /></p>
                            </div>
                            <div class="headerCell" style="width: 75%;">
                                <p>Include in duplicate check<i id="dupeErrorMessage" class="fa fa-question-circle tooltip" style="display:none;" data-description="If the update duplicate indicator is turned on, you need to have at least 1 field checked."></i></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!dupeFieldList}" var="elem">
                                    <div class="Row">
                                        <div class="Cell" style="width: 25%;">
                                             <apex:outputText value="{!elem}" />
                                        </div>
                                        <div class="Cell" style="width: 75%;">
                                            <input type="checkbox" id="dupe_{!elem}" class="dupeValue" onChange="updateDupeValue('{!$Component.dupeField}')" />
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <apex:inputField value="{!setting.scanbizcards__Selected_Dupe_Fields__c}" style="display: none" id="dupeField" />

            <script language="JavaScript">
                //this initially populates the checkbox based on the existing value for the duplicate criteria
                setupDupeCheckboxes('{!$Component.dupeField}');
            </script>
        </div>
        <div class="Campaigns">
            <apex:outputPanel id="campaignTopPagination">
                <apex:outputPanel styleClass="overFlow"  rendered="{!showCampaignPagination}">
                    <br/>
                    Only {!recordDisplayLimit} Campaigns can be displayed at once. If you navigate to another set of Campaigns, you will automatically save any changes you made to this Settings Profile.<br/>
                    <br/>
        
                    <apex:commandLink value="#" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="A" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="A" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="B" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="B" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="C" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="C" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="D" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="D" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="E" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="E" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="F" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="F" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="G" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="G" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="H" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="H" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="I" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="I" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="J" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="J" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="K" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="K" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="L" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="L" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="M" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="M" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="N" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="N" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="O" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="O" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="P" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="P" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Q" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="Q" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="R" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="R" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="S" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="S" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="T" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="T" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="U" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="U" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="V" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="V" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="W" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="W" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="X" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="X" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Y" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="Y" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Z" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                        <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="Z" />
                    </apex:commandLink>
                    &nbsp;&nbsp;&nbsp;
                    <br/><br/>
                </apex:outputPanel>
            </apex:outputPanel>
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 59%;">
                                <p>Campaign Name</p>
                            </div>
                            <div class="headerCell" style="width: 8%;">
                                <p>Enabled<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies whether the user can add exported Leads or Contacts to this Campaign during an export."/></p>
                            </div>
                            <div class="headerCell" style="width: 8%;">
                                <p>Auto-set<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies whether exported Leads or Contacts are added to this Campaign automatically (will not be shown to the user as a choice during the export)." /></p>
                            </div>
                            <div class="headerCell" style="width: 25%;">
                                <p>Opt-in Text<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies the text the user sees next to the checkbox to add the exported Lead or Contact to this Campaign." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel layout="block" id="CampaignsTable" styleclass="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!campaignList}" var="campaign">
                                    <div class="Row">
                                        <div class="Cell" style="width: 59%;">
                                             <apex:outputText value="{!campaign.Name}" />
                                        </div>
                                        <div class="Cell" style="width: 8%;">
                                             <apex:inputField value="{!campaign.scanbizcards__Enabled__c}" />
                                        </div>
                                        <div class="Cell" style="width: 8%;">
                                             <apex:inputField value="{!campaign.scanbizcards__Auto_set__c}" />
                                        </div>
                                        <div class="Cell" style="width: 25%;">
                                             <apex:inputField value="{!campaign.scanbizcards__Opt_in_Text__c}" />
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
            </div>
            <apex:outputPanel id="campaignBottomPagination">
                <apex:outputPanel styleClass="overFlow" style="position: relative;" rendered="{!showCampaignPagination}">
                    <br/>
                    <apex:outputPanel id="prevCampLink">
                        <apex:commandLink value="<< Previous" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                            <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="{!campForPrevLink}" />
                            <apex:param name="direction" assignTo="{!goingBackCamp}" value="true" />
                        </apex:commandLink>
                    </apex:outputPanel>
                    &nbsp;&nbsp;
                    <apex:outputPanel id="nextCampLink">
                         <apex:commandLink value="Next >>" action="{!onSave}" reRender="CampaignsTable,nextCampLink,prevCampLink,messagesBlock,shouldScrollPanel" onclick="startLoadingCampaigns(null);" oncomplete="loadLazyContent('CampaignsTable');showErrorMessage();finishLoadingCampaigns()">
                            <apex:param name="goToNextCampaign" assignTo="{!goToNextCampaign}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedCampOffset}" value="{!campForNextLink}" />
                        </apex:commandLink>
                    </apex:outputPanel>
                </apex:outputPanel>
            </apex:outputPanel>
            &nbsp;&nbsp;&nbsp;
            <span id="loadingNextSetCamp" style="display: none">
                <img src="{!$Resource.AnimatedSpinner}" />
                Loading records...
            </span>
        </div>
        <div class="Accounts">
            <apex:outputPanel styleClass="overflow" id="largeAccountControlsBlock">
                <apex:outputPanel rendered="{!isLargeAccountOrg}">
                    <br/>
                    Your organization has a very large number of accounts that have not been processed by ScanBizCards. Please refresh the list of Accounts known to ScanBizCards by clicking the refresh button below.
                    <br/>
                    <apex:outputPanel id="settingId" style="display: none">{!setting.Id}</apex:outputPanel>
                    <apex:commandButton action="{!refreshClick}" reRender="largeAccountControlsBlock,acctTopPaginationSection,accountTable,acctBottomPaginationSection" value="Refresh Accounts" onclick="showRefreshControls(this)" oncomplete="refreshAccounts('{!$Component.settingId}')" />

                    <img src="{!$Resource.AnimatedSpinner}" id="imgSpinner" style="display: none"/>
                    <span id="refreshStatus" style="display: none"></span>
                    <apex:actionFunction action="{!reloadAccounts}" name="reloadAccounts" reRender="largeAccountControlsBlock,acctTopPaginationSection,acctBottomPaginationSection,accountTable"/>
                    <br/>
                </apex:outputPanel>
            </apex:outputPanel>
            <apex:outputPanel id="acctTopPaginationSection">
                <apex:outputPanel styleClass="overflow" rendered="{!showAcctPagination}">
                    <br/>
                    Only {!recordDisplayLimit} Accounts can be displayed at once. If you navigate to another set of Accounts, you will automatically save any changes you made to this Settings Profile.<br/>
                    <br/>
    
                    <apex:commandLink value="#" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="A" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="A" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="B" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="B" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="C" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="C" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="D" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="D" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="E" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="E" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="F" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="F" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="G" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="G" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="H" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="H" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="I" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="I" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="J" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="J" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="K" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="K" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="L" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="L" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="M" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="M" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="N" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="N" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="O" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="O" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="P" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="P" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Q" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="Q" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="R" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="R" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="S" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="S" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="T" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="T" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="U" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="U" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="V" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="V" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="W" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="W" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="X" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="X" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Y" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="Y" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Z" action="{!onSave}" reRender="accountTable,nextLink,prevLink,messagesBlock,shouldScrollPanel" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                        <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="Z" />
                    </apex:commandLink>
                    &nbsp;&nbsp;&nbsp;
                    <br/><br/>
                </apex:outputPanel>
            </apex:outputPanel>
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 40%;">
                                <p>Account Name</p>
                            </div>
                            <div class="headerCell" style="width: 40%;">
                                <p>City / State</p>
                            </div>
                            <div class="headerCell" style="width: 20%;">
                                <p>Enabled <img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies whether the user can attach the Contact they are exporting to this Account." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel layout="block" id="accountTable" styleclass="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!accountList}" var="account">
                                    <div class="Row">
                                        <div class="Cell" style="width: 40%;">
                                             <apex:outputText value="{!account.Name}" />
                                        </div>
                                        <div class="Cell" style="width: 40%;">
                                             {!account.ParentAccount__r.BillingCity}, {!account.ParentAccount__r.BillingState}
                                        </div>
                                        <div class="Cell" style="width: 20%;">
                                             <apex:inputField value="{!account.scanbizcards__Enabled__c}" />
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </apex:outputpanel>
            </div>
            <apex:outputPanel id="acctBottomPaginationSection">
                <apex:outputPanel rendered="{!showAcctPagination}"  style="position: relative;">
                    <br/>
                    <apex:outputPanel id="prevLink">
                        <apex:commandLink value="<< Previous" action="{!onSave}" reRender="accountTable,nextLink,prevLink,shouldScrollPanel,messagesBlock" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                            <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="{!acctForPrevLink}" />
                            <apex:param name="direction" assignTo="{!goingBack}" value="true" />
                        </apex:commandLink>
                    </apex:outputPanel>
                    &nbsp;&nbsp;
                    <apex:outputPanel id="nextLink">
                         <apex:commandLink value="Next >>" action="{!onSave}" reRender="accountTable,nextLink,prevLink,shouldScrollPanel,messagesBlock" onclick="startLoadingAccounts(null);" oncomplete="loadLazyContent('accountTable');showErrorMessage();finishLoadingAccounts();">
                            <apex:param name="goToNextAccount" assignTo="{!goToNextAccount}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedAcctOffset}" value="{!acctForNextLink}" />
                        </apex:commandLink>
                    </apex:outputPanel>
                </apex:outputPanel>
            </apex:outputPanel>
            &nbsp;&nbsp;&nbsp;
            <span id="loadingNextSet" style="display: none">
                <img src="{!$Resource.AnimatedSpinner}" />
                Loading records...
            </span>
        </div>
        <div class="LeadOwners">
            <apex:outputPanel id="leadTopPaginationSection">
                <apex:outputPanel rendered="{!showLOPagination}">
                    <br/>
                    Only {!recordDisplayLimit} Lead Owners can be displayed at once. If you navigate to another set of Lead Owners, you will automatically save any changes you made to this Settings Profile.<br/>
                    <br/>
        
                    <apex:commandLink value="#" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="A" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="A" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="B" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="B" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="C" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="C" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="D" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="D" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="E" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="E" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="F" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="F" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="G" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="G" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="H" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="H" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="I" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="I" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="J" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="J" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="K" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="K" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="L" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="L" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="M" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="M" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="N" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="N" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="O" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="O" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="P" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="P" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Q" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="Q" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="R" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="R" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="S" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="S" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="T" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="T" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="U" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="U" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="V" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="V" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="W" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="W" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="X" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="X" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Y" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="Y" />
                    </apex:commandLink>
                    |&nbsp;
                    <apex:commandLink value="Z" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                        <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                        <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="Z" />
                    </apex:commandLink>
                    &nbsp;&nbsp;&nbsp;
                    <br/><br/>
                </apex:outputPanel>
            </apex:outputPanel>
            
            <div class="tableSection">
                <div class="headerContent">
                    <div class="Table1">
                        <div class="Heading">
                            <div class="headerCell" style="width: 35%;">
                                <p>Name</p>
                            </div>
                            <div class="headerCell" style="width: 35%;">
                                <p>Email</p>
                            </div>
                            <div class="headerCell" style="width: 15%;">
                                <p>Type</p>
                            </div>
                            <div class="headerCell" style="width: 15%;">
                                <p>Enabled<img src="{!URLFOR($Resource.ScanBizCardsPackage, 'images/questionmark.png')}" style="margin-bottom: -5px;margin-left: 4px" class="tooltip" data-description="Specifies whether the user can select this User or Queue as the Lead Owner of a Lead they are exporting." /></p>
                            </div>
                        </div>
                    </div>
                </div>
                <apex:outputPanel layout="block" id="leadOwnersTable" styleclass="customTableScrollbar">
                    <div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>
                    <div class="viewport">
                        <div class="overview">
                            <div class="Table2">
                                <apex:repeat value="{!leadOwnerList}" var="leadOwner">
                                    <div class="Row">
                                        <div class="Cell" style="width: 35%;">
                                             <apex:outputText value="{!leadOwner.Name}" />
                                        </div>
                                        <div class="Cell" style="width: 35%;">
                                            <span id="{!leadOwner.OwnerId}">{!leadOwner.Owner.Email}</span>

                                            <script language="JavaScript">
                                                //if this lead owner was loaded from DB we will have the owner properties. but if not, we need to get them from
                                                //JavaScript remoting
                                                
                                                {!IF(leadOwner.Owner.Email==null,'updateLeadOwnerEmail("' + leadOwner.OwnerId + '","' + leadOwner.scanbizcards__OwnerType__c + '");','')}
                                            </script>
                                        </div>
                                        <div class="Cell" style="width: 15%;">
                                             <apex:outputText value="{!leadOwner.scanbizcards__OwnerType__c}" />
                                        </div>
                                        <div class="Cell" style="width: 15%;">
                                             <apex:inputField value="{!leadOwner.scanbizcards__Enabled__c}" />
                                        </div>
                                    </div>
                                </apex:repeat>
                            </div>
                        </div>
                    </div>
                </apex:outputPanel>
            </div>
            
            <apex:outputPanel id="leadBottomPaginationSection">
                <apex:outputPanel rendered="{!showLOPagination}"  style="position: relative;">
                    <br/>
                    <apex:outputPanel id="prevLOLink">
                        <apex:commandLink value="<< Previous" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                            <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="{!loForPrevLink}" />
                            <apex:param name="direction" assignTo="{!goingBackLO}" value="true" />
                        </apex:commandLink>
                    </apex:outputPanel>
                    &nbsp;&nbsp;
                    <apex:outputPanel id="nextLOLink">
                         <apex:commandLink value="Next >>" action="{!onSave}" reRender="leadOwnersTable,nextLOLink,prevLOLink,messagesBlock,shouldScrollPanel" onclick="startLoadingLeadOwners(null);" oncomplete="loadLazyContent('leadOwnersTable');showErrorMessage();finishLoadingLeadOwners()">
                            <apex:param name="goToNextLO" assignTo="{!goToNextLO}" value="true" />
                            <apex:param name="newOffset" assignTo="{!selectedLOOffset}" value="{!loForNextLink}" />
                        </apex:commandLink>
                    </apex:outputPanel>
                </apex:outputPanel>
            </apex:outputPanel>
            &nbsp;&nbsp;&nbsp;
            <span id="loadingNextSetLO" style="display: none">
                <img src="{!$Resource.AnimatedSpinner}" />
                Loading records...
            </span>
        </div>
        <div class="blackBackground"></div>
        <div class="popup" style="display:none;">
            <div class="titleBar">
                <span class="title">Cancel Changes?</span>
                <div class="closeText"><a href="#" onclick="closePopup(); return false;"><i class="fa fa-times"></i></a></div>
            </div>
            <div class="title-seperator"></div>
            <div class="content">
                Are you sure you want to cancel these edits before saving?
            </div>
            <div class="title-seperator"></div>
            <div class="buttons">
                <span><a class="customButton" href="#" style="background-color:#bababa;" onclick="closePopup(); return false;">No</a></span>
                <span><a class="customButton" href="#" onclick="window.location.href = '{!$Page.Settings}'; return false;">Yes</a></span>
            </div>
        </div>
    </apex:form>
</apex:page>